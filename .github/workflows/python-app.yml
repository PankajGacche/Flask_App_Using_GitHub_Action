name: CI/CD Workflow

on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=src
          pytest

  build:
    runs-on: ubuntu-latest
    needs: run_tests
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build application
        run: |
          # Add your build commands here
          echo "Building application..."

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging..."

  deploy_production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Flask-Deployment Directory
        run: |
          mkdir -p Flask-Deployment
          echo "Flask-Deployment directory ensured."

      - name: Print GitHub Ref
        run: |
          echo "GitHub Ref: $GITHUB_REF"

      - name: Deploy to Production
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          HOST_NAME: ${{ secrets.HOST_NAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          echo "Deploying to production..."
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
          # Create Flask-Deployment directory if it doesn't exist
          mkdir -p Flask-Deployment
          cd Flask-Deployment
          # Check if the directory is a Git repository
          if [ ! -d .git ]; then
            echo 'Directory Flask-Deployment is not a Git repository. Cloning repository...'
            git clone https://github.com/${GITHUB_REPOSITORY}.git . 
          else
            echo 'Directory Flask-Deployment is a Git repository. Pulling latest changes...'
            git pull
          fi
          # Deployment commands
          sudo apt update
          sudo apt install python3
          sudo apt install python3-pip
          python3 -m venv myenv && source myenv/Scripts/activate
          pip install flask pytest
          pip install gunicorn
          sudo ufw enable
          sudo ufw allow 22
          sudo ufw allow 80
          sudo ufw allow 5000
          sudo ufw reload
          gunicorn --bind 0.0.0.0:5000 app:app
          sudo touch /etc/systemd/system/flaskapp.service
          sudo sh -c 'printf "[Unit]\nDescription=Flask Application\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nWorkingDirectory=/home/ubuntu/Flask-Deployment\nExecStart=/home/ubuntu/.local/bin/gunicorn --workers 3 --bind unix:flaskapp.sock app:app\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n" > /etc/systemd/system/flaskapp.service'
          sudo systemctl daemon-reload
          sudo systemctl start flaskapp"
