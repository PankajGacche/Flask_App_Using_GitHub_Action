name: CI/CD Workflow

on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=src
          pytest

  build:
    runs-on: ubuntu-latest
    needs: run_tests
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build application
        run: |
          # Add your build commands here
          echo "Building application..."

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging..."

  deploy_production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Flask-Deployment Directory
        run: |
          mkdir -p Flask-Deployment
          echo "Flask-Deployment directory ensured."

      - name: Print GitHub Ref
        run: |
          echo "GitHub Ref: $GITHUB_REF"

      - name: Deploy to Production
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          HOST_NAME: ${{ secrets.HOST_NAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          echo "Deploying to production..."
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
          ls &&
          cd Flask-Deployment/ &&
          ls &&
          git pull &&
          sudo systemctl stop flask-app &&
          sudo systemctl daemon-reload &&
          sudo systemctl start flask-app"
